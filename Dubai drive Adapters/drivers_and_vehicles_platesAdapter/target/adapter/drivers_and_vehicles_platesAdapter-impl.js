
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Generated code - Do not edit																					 //
//																												 //
// This is a SOAP adapter that was auto-generated by Worklight for invocation of specific SOAP-based services.   //
// The adapter may invoke more than one service as long as they are all from the same enpdpoint (server host).   //
// Each adapter procedure matches a single operation for the same endpoint server and accepts:                   //
//   params  - Serialized JSON representation of the XML-based SOAP body to be sent to the service               //
//   headers - Custom HTTP headers to be specified when invoking the remote service. It is a JSON object with    //
//             the headers names and values. E.g. { 'name1' : 'value1', 'name2' : 'value2' }                     //
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
var soapEnvNS = 'xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" ';
var userName = "%#credentials!#!username#%";
var password = "%#credentials!#!password#%";
var externalUsername = "%#credentials!#!externalUsername#%";
var externalPassword = "%#credentials!#!externalPassword#%";
var IsDebugging;
function Log(text){
	try {
		IsDebugging=MFP.Server.getPropertyValue("drivers_and_vehicles_is_debugging");
	}catch(e){
		IsDebugging="false";
	}
	 MFP.Logger.warn(""+IsDebugging);
	if(IsDebugging=="true")
		MFP.Logger.warn(text);
	else 
		MFP.Logger.debug(text);
}
function generalPlateService(params, isEncryptResponse, encryptionPassword){
	var envHeader = {
			"ae:password":password,
			"ae:username": userName
	};
	var servicePath= '/ws/services/GeneralPlateService';
	var _soapEnvNS = soapEnvNS+'xmlns:ae="http://ae.gov.trf.vhl.ws.PlateLogoService"';
    var parameters = [envHeader,params, "", _soapEnvNS];
    var request = buildBody(parameters, false);
    //Log("GeneralPlateService request >> " + request);
    return invokeWebService(request,servicePath, null, isEncryptResponse, encryptionPassword);
}
function plateAuction(params, isEncryptResponse, encryptionPassword){
	 var envHeader = {
	   "ae:username": userName,
	   "ae:password": password

	 };
	 var servicePath= '/ws/services/PlateAuctionServiceService';  //
	 var _soapEnvNS = soapEnvNS+'xmlns:ae="http://ae.gov.trf.spl.ws.AuctionService"';
	    var parameters = [envHeader,params, "", _soapEnvNS];
	    var request = buildBody(parameters, false);
	   
	    //Log("getAuctionTypes request >> " + request);
	    return invokeWebService(request,servicePath, null, isEncryptResponse, encryptionPassword);
	}
function plateLogoService(params, isEncryptResponse, encryptionPassword){
	var envHeader = {
			"ae:password":password,
			"ae:username": userName
	};
	var servicePath = '/ws/services/PlateLogoService';
	var _soapEnvNS = soapEnvNS+'xmlns:ae="http://ae.gov.trf.vhl.ws.PlateLogoService"';
    var parameters = [envHeader,params, '', _soapEnvNS];
    var request = buildBody(parameters, false);
    
    //Log("PlateLogoService request >> " + request);
    return invokeWebService(request,servicePath, null, isEncryptResponse, encryptionPassword);
}
function getSpecialPlatesService(params, isEncryptResponse, encryptionPassword){
	var envHeader = {
			"impl:password":password,
			"impl:username": userName
	};
	var servicePath= '/ws/services/GetSpecialPlatesService';
	var _soapEnvNS = soapEnvNS + 'xmlns:impl="http://ae.gov.trf.spl.ws.GetSpecialPlatesService"  xmlns:urn="urn:GetUserApplicationService" ';
    var parameters = [envHeader,params, "", _soapEnvNS];
    var request = buildBody(parameters, false);
    MFP.Logger.warn("getSpecialPlatesService request | " + request)
    //Log("GetSpecialPlatesService request >> " + request);
    var result =  invokeWebService(request,servicePath, null, isEncryptResponse, encryptionPassword);
    MFP.Logger.warn("getSpecialPlatesService response | " + result)
    return result
   
}
function corporateService(params, isEncryptResponse, encryptionPassword){
	var envHeader = {
			"urn:authenticationHeaderType": {
				"urn:username": userName,
				"urn:password": password,
//				"urn:externalUsername": externalUsername,
//				"urn:externalUserPassword": externalPassword
			}
	};
	var servicePath= '/ws/services/CorporateService';
	var soapEnvNS = 'xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:urn="urn:CorporateService"';
    var parameters = [envHeader,params, 'xmlns:urn="urn:CorporateService"', soapEnvNS];
    var request = buildBody(parameters, false);
    
    //Log("CorporateService request >> " + request);
    return invokeWebService(request,servicePath, null, isEncryptResponse, encryptionPassword);
}
function getRefDomainValuesByCode(params, isEncryptResponse, encryptionPassword){
	var envHeader = {
			"new:password":password,
			"new:username": userName
	};
	var servicePath = 'ws/services/NewMaintenanceService';
	var _soapEnvNS = soapEnvNS+'xmlns:new="http://dubaipolice/ebsrv/services/NewMaintenance"';
    var parameters = [envHeader,params, '', _soapEnvNS];
    var request = buildBody(parameters, false);
    //MFP.Logger.warn("******"+request);
    //Log("plate sizes request >> " + request);
    return invokeWebService(request,servicePath, null, isEncryptResponse, encryptionPassword);
}
function buildBody(parameters, isStatic) {
	var request = "";
	
	if (isStatic == true) {
			request = MFP.Server.invokeProcedure({
			adapter : 'drivers_and_vehciles_utilitiesAdapter',
			procedure : 'buildBodyFromStaticRequest',
			parameters : parameters,
			
		});
	} else {
			request = MFP.Server.invokeProcedure({
			adapter : 'drivers_and_vehciles_utilitiesAdapter',
			procedure : 'buildBody',
			parameters : parameters
		});
	}
	
	return request.body;
}

function invokeWebService(body,servicePath,headers, isEncryptResponse, encryptionPassword){
	var startTime = new Date().getTime();
	if (!headers)
		headers = {
			"SOAPAction" : ""
		};
	else
		headers["SOAPAction"] = "";
    var input = {
        method : 'post',
        returnedContentType : 'HTML',
        path :servicePath,
        body: {
            content : body.toString(),
            contentType : 'text/xml; charset=utf-8'
        }
    };
    
    //Adding custom HTTP headers if they were provided as parameter to the procedure call 
    headers && (input['headers'] = headers);
    
    var webServiceResult = MFP.Server.invokeHttp(input);
	if(isEncryptResponse != undefined && isEncryptResponse == true)
	{
		var responseString = JSON.stringify(webServiceResult);
		var invocationData = {
			adapter : 'drivers_and_vehciles_utilitiesAdapter',
			procedure : 'encryptData',
			parameters : [responseString,encryptionPassword]
		};
		webServiceResult = MFP.Server.invokeProcedure(invocationData);
	}	
	var endTime = new Date().getTime();
	//Log("time for "+ servicePath + " is " + (endTime - startTime) + " ms");
	var invocationData = {
			adapter : 'drivers_and_vehciles_utilitiesAdapter',
			procedure : 'deleteCredientails',
			parameters : [webServiceResult]
	};
	return MFP.Server.invokeProcedure(invocationData); }
function getRefDomainValuesByCode(params, isEncryptResponse, encryptionPassword){
	var envHeader = {
			"new:password":password,
			"new:username": userName
	};
	var servicePath = 'ws/services/NewMaintenanceService';
	var _soapEnvNS = soapEnvNS+'xmlns:new="http://dubaipolice/ebsrv/services/NewMaintenance"';
    var parameters = [envHeader,params, '', _soapEnvNS];
    var request = buildBody(parameters, false);
    //MFP.Logger.warn("******"+request);
    //Log("plate sizes request >> " + request);
    return invokeWebService(request,servicePath, null, isEncryptResponse, encryptionPassword);
}
