///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Generated code - Do not edit																					 //

//This is a SOAP adapter that was auto-generated by Worklight for invocation of specific SOAP-based services.   //
//The adapter may invoke more than one service as long as they are all from the same enpdpoint (server host).   //
//Each adapter procedure matches a single operation for the same endpoint server and accepts:                   //
//envHeader- Serialized JSON representation of the XML-based SOAP envelope to be sent to the service 
//params  - Serialized JSON representation of the XML-based SOAP body to be sent to the service               //
//headers - Custom HTTP headers to be specified when invoking the remote service. It is a JSON object with    //
//the headers names and values. E.g. { 'name1' : 'value1', 'name2' : 'value2' }                     //
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////

var soapEnvNS = 'xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" ';
var userName = "%#credentials!#!username#%";
var password = "%#credentials!#!password#%";
var externalUsername = "%#credentials!#!externalUsername#%";
var externalPassword = "%#credentials!#!externalPassword#%";
var IsDebugging;




//9.12 OTP 
//Tibco operation To Be implemented 

function OTPTest(OTPGuid, TransactionTypeId, CountryCode, ContactNumber, isEncryptResponse, encryptionPassword) {

	//TransactionTypeId   -- //Transaction Type ID for the specific transaction.  Transaction Type ID should be matched with the master data defined in salik system.//Refer table TransactionType for all the services which requires OTP.
	//OTPGuid
	//CountryCode
	//ContactNumber

	//var TransactionTypeId = '';
	//var OTPGuid = '';

	var userName = MFP.Server.getPropertyValue("wsse.tibco.username");
	var password = MFP.Server.getPropertyValue("wsse.tibco.password");

	var requestDate = new Date(Date.now());
	var requestDateFormated = requestDate.toISOString(); // Returns 2011-10-05T14:48:00.000Z	


	var request = '' ;



//	return{
//	message:request
//	}

	var SOAPAction = "OTP";
	var servicePath = '/salikOTPService';
	var requestObj = buildBody([request], true);


	//return invokeWebServiceString(requestObj, servicePath, SOAPAction, isEncryptResponse, encryptionPassword);

	var webServiceResult = {
			Envelope:{

				"Body":{"OTPResponse":{
					"ResponseCode": "42_0",
					"ResponseDescription": "Success"

					}
				}	
				,"Header":""}
				,"totalTime":54
				,"isSuccessful":true
				,"responseHeaders":{"Date":"Sun, 02 Jul 2017 05:21:33 GMT","Content-Type":"text\/xml; charset=utf-8"}
				,"statusReason":"OK"
				,"warnings":[]
				,"errors":[]
				,"info":[]
				,"responseTime":53
				,"statusCode":200
			}
	var invocationData = {
			adapter : 'drivers_and_vehciles_utilitiesAdapter',
			procedure : 'deleteCredientails',
			parameters : [webServiceResult]
	};
	return MFP.Server.invokeProcedure(invocationData); 



}

function OTP(OTPGuid, TransactionTypeId, CountryCode, ContactNumber, isEncryptResponse, encryptionPassword) {

	//TransactionTypeId   -- //Transaction Type ID for the specific transaction.  Transaction Type ID should be matched with the master data defined in salik system.//Refer table TransactionType for all the services which requires OTP.
	//var OTPGuid = '7dc82efb-c88f-417f-8b0d-8a032b23ad0c';

	var userName = MFP.Server.getPropertyValue("wsse.tibco.username");
	var password = MFP.Server.getPropertyValue("wsse.tibco.password");

	var requestDate = new Date(Date.now());
	var requestDateFormated = requestDate.toISOString(); // Returns 2011-10-05T14:48:00.000Z	


	var request = '<soapenv:Envelope xmlns:sch="http://www.rta.ae/schemas/SalikOTPService/Schema.xsd" xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/">' +
	' <soapenv:Header>' +
	'	    <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">' +
	'	       <wsse:UsernameToken wsu:Id="UsernameToken-4">' +
	'	          <wsse:Username>' + userName + '</wsse:Username>' +
	'	          <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">' + password + '</wsse:Password>' +
	'	          <wsse:Nonce EncodingType="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-soap-message-security-1.0#Base64Binary">+3+gT43IDN0dWnPURJrHPQ==</wsse:Nonce>' +
	'	          <wsu:Created>'+ requestDateFormated +'</wsu:Created>' +
	'	       </wsse:UsernameToken>' +
	'	    </wsse:Security>' +
	'	 </soapenv:Header>' +
	'	 <soapenv:Body>' +
	'	    <sch:OTPRequest>' +
	'	       <sch:TransactionTypeId>'+ TransactionTypeId +'</sch:TransactionTypeId>' +
	' 	   <sch:OTPGuid>'+ OTPGuid +'</sch:OTPGuid>' +
	'	       <sch:CountryCode>'+ CountryCode +'</sch:CountryCode>' +
	'	       <sch:ContactNumber>'+ ContactNumber +'</sch:ContactNumber>' +
	'	       <sch:AppId>SALIK</sch:AppId>' +
	'	    </sch:OTPRequest>' +
	'	 </soapenv:Body>' +
	'	</soapenv:Envelope>' ;



//	return{
//	message:request
//	}

	var SOAPAction = "OTP";
	var servicePath = '/salikOTPService';
	var requestObj = buildBody([request], true);


	return invokeWebServiceString(requestObj, servicePath, SOAPAction, isEncryptResponse, encryptionPassword);

}





function invokeWebServiceString(request, servicePath, SOAPAction, isEncryptResponse, encryptionPassword) {


	Log("|drivers_and_vehicles_SalikDisputes_GuestAdapter ------------->>> | "+ servicePath +"  | Request : " + request );

	// Log DB Log In DB
	//	try {
	//		LogRequestResult = LogRequest(request, SOAPAction) ;
	//	} catch (e) {
	//		Log("|drivers_and_vehicles_SalikFeedBack_GuestAdapter | invokeWebServiceString ------------->>> | "+ SOAPAction +"  | exception ***************: " );
	//	}

	var startTime = new Date().getTime();
	var input = {
			method : 'post',
			headers : {
				"SOAPAction" : SOAPAction
			},
			returnedContentType : 'xml',
			path : servicePath,
			body : {
				content : JSON.parse(request),
				contentType : 'text/xml; charset=utf-8'
			}
	};

	var webServiceResult = MFP.Server.invokeHttp(input);


	Log("|drivers_and_vehicles_SalikDisputes_GuestAdapter --- | "+ SOAPAction +"  | Request : " + request + ", Response: "+JSON.stringify(webServiceResult) );

	// Update response in DB  where DBLogID  ////////////////////////////////
	//	try {
	//		LogResponse (LogRequestResult.Envelope.RAND_REF, JSON.stringify(webServiceResult));
	//	} catch (e) {
	//		Log("|drivers_and_vehicles_SalikFeedBack_GuestAdapter 2 | invokeWebServiceString ------------->>> | "+ servicePath +"  | exception ***************: " );
	//	}

	if(isEncryptResponse != undefined && isEncryptResponse == true)
	{
		var responseString = JSON.stringify(webServiceResult);
		var invocationData = {
				adapter : 'drivers_and_vehciles_utilitiesAdapter',
				procedure : 'encryptData',
				parameters : [responseString,encryptionPassword]
		};
		webServiceResult = MFP.Server.invokeProcedure(invocationData);
	}	
	var endTime = new Date().getTime();
	//Log("time for " + servicePath + " is " + (endTime - startTime) + " ms");
	var invocationData = {
			adapter : 'drivers_and_vehciles_utilitiesAdapter',
			procedure : 'deleteCredientails',
			parameters : [webServiceResult]
	};
	return MFP.Server.invokeProcedure(invocationData); 
}


function buildBody(parameters, isStatic) {
	var request = "";

	if (isStatic == true) {
		request = MFP.Server.invokeProcedure({
			adapter : 'drivers_and_vehciles_utilitiesAdapter',
			procedure : 'buildBodyFromStaticRequest',
			parameters : parameters,

		});
	} else {
		request = MFP.Server.invokeProcedure({
			adapter : 'drivers_and_vehciles_utilitiesAdapter',
			procedure : 'buildBody',
			parameters : parameters
		});
	}

	return request.body;
}


function Log(text) {

	MFP.Logger.warn(text);


	try {
		IsDebugging = MFP.Server.getPropertyValue("drivers_and_vehicles_is_debugging");
	} catch (e) {
		IsDebugging = "false";
	}
	if (IsDebugging == "true")
		MFP.Logger.warn(text);
	else
		MFP.Logger.debug(text);
}


function invokeWebService(body, servicePath, headers, isEncryptResponse, encryptionPassword) {
	var startTime = new Date().getTime();
	if (!headers)
		headers = {
			"SOAPAction" : ""
	};
	else
		headers["SOAPAction"] = "";
	var input = {
			method : 'post',
			returnedContentType : 'xml',
			path : servicePath,
			body : {
				content : body.toString(),
				contentType : 'text/xml; charset=utf-8'
			}
	};

	// Adding custom HTTP headers if they were provided as parameter to the
	// procedure call
	headers && (input['headers'] = headers);

	var webServiceResult = MFP.Server.invokeHttp(input);
	if(isEncryptResponse != undefined && isEncryptResponse == true)
	{
		var responseString = JSON.stringify(webServiceResult);
		var invocationData = {
				adapter : 'drivers_and_vehciles_utilitiesAdapter',
				procedure : 'encryptData',
				parameters : [responseString,encryptionPassword]
		};
		webServiceResult = MFP.Server.invokeProcedure(invocationData);
	}	
	var endTime = new Date().getTime();
	//Log("time for " + servicePath + " is " + (endTime - startTime) + " ms");
	return webServiceResult;
}


function LogRequest(REQUEST, PROCEDURE_NAME) {

	var REQUEST_ID = null ;
	var ADAPTER_NAME ='drivers_and_vehicles_SalikFeedBack_GuestAdapter' ;
	var REQUEST_TIME = null ;
	var RESPONSE_TIME = null ;
	//var PROCEDURE_NAME ='TestPROCEDURE';
	//var REQUEST ='Test Request';
	var RESPONSE = null ;

	var invocationData = {
			adapter : 'SalikLogsAdapter',
			procedure : 'logRequest',
			parameters : [REQUEST_ID,ADAPTER_NAME,REQUEST_TIME,RESPONSE_TIME,PROCEDURE_NAME,REQUEST,RESPONSE]
	};							 


	updateStatementResult = MFP.Server.invokeProcedure(invocationData);


	return updateStatementResult;


}


function LogResponse(RAND_REF, RESPONSE) {

	var invocationData = {
			adapter : 'SalikLogsAdapter',
			procedure : 'logResponse',
			parameters : [RAND_REF, RESPONSE]
	};							 

	webServiceResult = MFP.Server.invokeProcedure(invocationData);

	return webServiceResult;
}

