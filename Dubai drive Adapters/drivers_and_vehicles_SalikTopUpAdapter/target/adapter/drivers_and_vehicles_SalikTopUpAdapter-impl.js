///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Generated code - Do not edit																					 //

//This is a SOAP adapter that was auto-generated by Worklight for invocation of specific SOAP-based services.   //
//The adapter may invoke more than one service as long as they are all from the same enpdpoint (server host).   //
//Each adapter procedure matches a single operation for the same endpoint server and accepts:                   //
//envHeader- Serialized JSON representation of the XML-based SOAP envelope to be sent to the service 
//params  - Serialized JSON representation of the XML-based SOAP body to be sent to the service               //
//headers - Custom HTTP headers to be specified when invoking the remote service. It is a JSON object with    //
//the headers names and values. E.g. { 'name1' : 'value1', 'name2' : 'value2' }
// Created By Ahmed Raouf 27-SEP-2018
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
var soapEnvNS = 'xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" ';
var userName = "%#credentials!#!username#%";
var password = "%#credentials!#!password#%";
var externalUsername = "%#credentials!#!externalUsername#%";
var externalPassword = "%#credentials!#!externalPassword#%";

var _userName = "%#credentials!#!username_tibco#%";
var _password = "%#credentials!#!password_tibco#%";
var adapterName = "drivers_and_vehicles_SalikTopUpAdapter";
var IsDebugging;
var soapEnvStart = '<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="http://www.rta.ae/schemas/SalikRechargeService/Schema.xsd">';
var soapEnvEnd = '</soapenv:Envelope>';
var soapHeaderStart = '<soapenv:Header>';
var soapHeaderEnd = '</soapenv:Header>';
var tibcoHeader = '<wsse:Security soapenv:mustUnderstand="0" xmlns:wsse=" http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd " xmlns=" http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:sch="http://schemas.xmlsoap.org/soap/envelope/">' +
    '<wsse:UsernameToken>' +
    '<wsse:Username>' + _userName + '</wsse:Username>' +
    '<wsse:Password>' + _password + '</wsse:Password>' +
    '</wsse:UsernameToken>' +
    '</wsse:Security>';
var validationError = {
    "errorCode": "-1",
    "errorMessage": "missing or invalid params! please check mandatory [Params]."
};

function getGrantHeader(RtaUserId, linking_attribute) {
    return '<sch:Header>' +
        '<sch:grant_type>IamGrant</sch:grant_type>' +
        '<sch:rta_id>' + RtaUserId + '</sch:rta_id>' +
        '<sch:linking_attribute>' + linking_attribute + '</sch:linking_attribute>' +
        '<sch:scope>openid+api</sch:scope>' +
        '</sch:Header>';
}

function notValid(string) {
    return (!string || string == undefined || string == "" || string.length == 0);
}

function uniqueNumber() {
    var date = Date.now();

    if (date <= uniqueNumber.previous) {
        date = ++uniqueNumber.previous;
    } else {
        uniqueNumber.previous = date;
    }

    return date;
}

uniqueNumber.previous = 0;

function referenceNumber() {
    return uniqueNumber() + '' + Math.floor(Math.random()*(999-100+1)+100);
}

function formateDate(timestamp) {

    var date = (notValid(timestamp)) ? new Date() : new Date(timestamp);
    return ('0' + date.getDate()).slice(-2) + '-' + ('0' + (date.getMonth() + 1)).slice(-2) + '-' + date.getFullYear() + ' ' + ('0' + date.getHours()).slice(-2) + ':' + ('0' + date.getMinutes()).slice(-2) + ':' + ('0' + date.getSeconds()).slice(-2);
}

function Log(text) {

    MFP.Logger.warn(text);

    try {
        IsDebugging = MFP.Server.getPropertyValue("drivers_and_vehicles_is_debugging");
    } catch (e) {
        IsDebugging = "false";
    }
    if (IsDebugging == "true")
        MFP.Logger.warn(text);
    else
        MFP.Logger.debug(text);
}

function invokeWebServiceString(request, servicePath, SOAPAction, isEncryptResponse, encryptionPassword) {

    var refNum = referenceNumber();
    var _webServiceResult;
    var webServiceResult;
    var responseString;

    //log request 
    _logRequestResponse(refNum, adapterName, SOAPAction, request, null, true);

    //do request
    var input = {
        method: 'post',
        headers: {
            "SOAPAction": SOAPAction
        },
        returnedContentType: 'xml',
        path: servicePath,
        body: {
            content: JSON.parse(request),
            contentType: 'text/xml; charset=utf-8'
        }
    };

    _webServiceResult = MFP.Server.invokeHttp(input);

    //delete credientails
    var invocationData = {
        adapter: 'drivers_and_vehciles_utilitiesAdapter',
        procedure: 'deleteCredientails',
        parameters: [_webServiceResult]
    };

    webServiceResult = MFP.Server.invokeProcedure(invocationData);
    responseString = JSON.stringify(webServiceResult);

    //encrypt response
    if (isEncryptResponse != undefined && isEncryptResponse == true) {

        var invocationData = {
            adapter: 'drivers_and_vehciles_utilitiesAdapter',
            procedure: 'encryptData',
            parameters: [responseString, encryptionPassword]
        };
        webServiceResult = MFP.Server.invokeProcedure(invocationData);
    }

    //log response
    _logRequestResponse(refNum, adapterName, SOAPAction, null, responseString, true);

    return webServiceResult;
}

function invokeWebService(body, servicePath, headers, isEncryptResponse, encryptionPassword) {
    var startTime = new Date().getTime();
    if (!headers)
        headers = {
            "SOAPAction": ""
        };
    else
        headers["SOAPAction"] = "";
    var input = {
        method: 'post',
        returnedContentType: 'xml',
        path: servicePath,
        body: {
            content: body.toString(),
            contentType: 'text/xml; charset=utf-8'
        }
    };

    // Adding custom HTTP headers if they were provided as parameter to the
    // procedure call
    headers && (input['headers'] = headers);

    var webServiceResult = MFP.Server.invokeHttp(input);
    if (isEncryptResponse != undefined && isEncryptResponse == true) {
        var responseString = JSON.stringify(webServiceResult);
        var invocationData = {
            adapter: 'drivers_and_vehciles_utilitiesAdapter',
            procedure: 'encryptData',
            parameters: [responseString, encryptionPassword]
        };
        webServiceResult = MFP.Server.invokeProcedure(invocationData);
    }
    var endTime = new Date().getTime();
    //Log("time for " + servicePath + " is " + (endTime - startTime) + " ms");
    var invocationData = {
        adapter: 'drivers_and_vehciles_utilitiesAdapter',
        procedure: 'deleteCredientails',
        parameters: [webServiceResult]
    };
    return MFP.Server.invokeProcedure(invocationData);
}

function buildBody(parameters, isStatic) {
    var request = "";
    if (isStatic == true) {
        request = MFP.Server.invokeProcedure({
            adapter: 'drivers_and_vehciles_utilitiesAdapter',
            procedure: 'buildBodyFromStaticRequest',
            parameters: parameters,

        });
    } else {
        request = MFP.Server.invokeProcedure({
            adapter: 'drivers_and_vehciles_utilitiesAdapter',
            procedure: 'buildBody',
            parameters: parameters
        });
    }
    return request.body;
}

function topUpAccount(profileObject, rechargeCardNumber, isEncryptResponse, encryptionPassword) {


    var userName = MFP.Server.getPropertyValue("wsse.tibco.username");
    var password = MFP.Server.getPropertyValue("wsse.tibco.password");

    if (profileObject.plateDetails.plateCountryCode != 'AE') {
        profileObject.plateDetails.plateSourceId = '0';
        profileObject.plateDetails.plateCategoryId = '0';
        profileObject.plateDetails.plateCode = '0';
    }

    //2017-05-17T06:14:39.047Z

    var requestDate = new Date(Date.now());
    var requestDateFormated = requestDate.toISOString(); // Returns 2011-10-05T14:48:00.000Z

    var request = '<soapenv:Envelope xmlns:sch="http://www.rta.ae/schemas/SalikRechargeService/Schema.xsd" xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/"> ' +
        ' <soapenv:Header>' +
        '	    <wsse:Security soapenv:mustUnderstand="0" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">' +
        '	       <wsse:UsernameToken wsu:Id="UsernameToken-6">' +
        '	          <wsse:Username>' + userName + '</wsse:Username>' +
        '	          <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">' + password + '</wsse:Password>' +
        '	          <wsse:Nonce EncodingType="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-soap-message-security-1.0#Base64Binary">1FVzwxCsg9Ad6bIUvIlIOw==</wsse:Nonce>' +
        '	          <wsu:Created>' + requestDateFormated + '</wsu:Created>' +
        '	       </wsse:UsernameToken>' +
        '	    </wsse:Security>' +
        '	 </soapenv:Header>' +
        ' 	 <soapenv:Body>' +
        '	    <sch:TopUpAccountRequest>' +
        '	       <sch:PlateDetails>' +
        '	          <sch:PlateCountryCode>' + profileObject.plateDetails.plateCountryCode + '</sch:PlateCountryCode>' +
        ' 	      <sch:PlateSourceId>' + profileObject.plateDetails.plateSourceId + '</sch:PlateSourceId>' +
        '	          <sch:PlateCategoryId>' + profileObject.plateDetails.plateCategoryId + '</sch:PlateCategoryId>' +
        '	          <sch:PlateNumber>' + profileObject.plateDetails.plateNumber + '</sch:PlateNumber>' +
        '	          <sch:PlateColorId>' + profileObject.plateDetails.plateCode + '</sch:PlateColorId>' +
        '	       </sch:PlateDetails>' +
        '	       <sch:MobileCountryCode>' + profileObject.plateDetails.mobileCountryCode + '</sch:MobileCountryCode>' +
        '	       <sch:MobileNumber>' + profileObject.plateDetails.mobileOperationCode + profileObject.plateDetails.mobileNumber + '</sch:MobileNumber>' +
        '	       <sch:RechargeCardNumber>' + rechargeCardNumber + '</sch:RechargeCardNumber>' +
        '	    </sch:TopUpAccountRequest>' +
        '	 </soapenv:Body>' +
        '	</soapenv:Envelope>';


    //	return{
    //		message:request
    //	}

    var SOAPAction = "TopUpAccountRequest";
    var servicePath = '/salikRechargeService';
    var requestObj = buildBody([request], true);


    return invokeWebServiceString(requestObj, servicePath, SOAPAction, isEncryptResponse, encryptionPassword);


    //	return{
    //		Envelope:{
    //						
    //			"Body":{"TopUpAccountResponse":{
    //								"ResponseCode":"14_0",
    //								"ResponseDescription":"Success",
    //								"Result":{
    //									"HappinessMeter":{
    //										"TransactionId":"1b52e3e7-2486-4e5a-b5a6-04c26bbd066a",
    //										"GESSEnabled":false,
    //										"ServiceCode":0,
    //										"ServiceDescription":""},
    //									"TrxnID":10013
    //								}
    //						}
    //			},
    //			"Header":"",
    //			"totalTime":26756,
    //			"isSuccessful":true,
    //			"responseHeaders":{"Date":"Mon, 03 Jul 2017 08:04:55 GMT","Content-Type":"text\/xml; charset=utf-8"},
    //			"statusReason":"OK",
    //			"warnings":[],
    //			"errors":[],
    //			"info":[],
    //			"responseTime":26756,
    //			"statusCode":200
    //		}
    //	}

}

function getLinkToken(profileObject, isEncryptResponse, encryptionPassword) {

    var userName = MFP.Server.getPropertyValue("wsse.tibco.username");
    var password = MFP.Server.getPropertyValue("wsse.tibco.password");

    if (profileObject.plateDetails.plateCountryCode != 'AE') {
        profileObject.plateDetails.plateSourceId = '0';
        profileObject.plateDetails.plateCategoryId = '0';
        profileObject.plateDetails.plateCode = '0';
    }

    var requestDate = new Date(Date.now());
    var requestDateFormated = requestDate.toISOString(); // Returns 2011-10-05T14:48:00.000Z

    var request = '<soapenv:Envelope xmlns:sch="http://www.rta.ae/schemas/SalikRechargeService/Schema.xsd" xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/">' +
        '   <soapenv:Header>' +
        '	    <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">' +
        '	       <wsse:UsernameToken wsu:Id="UsernameToken-4">' +
        '	          <wsse:Username>' + userName + '</wsse:Username>' +
        '	          <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">' + password + '</wsse:Password>' +
        '	          <wsse:Nonce EncodingType="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-soap-message-security-1.0#Base64Binary">mVMTpYGfjUKyczI8aqxbtg==</wsse:Nonce>' +
        '	          <wsu:Created>' + requestDateFormated + '</wsu:Created>' +
        '	       </wsse:UsernameToken>' +
        '	    </wsse:Security>' +
        '	 </soapenv:Header>' +
        '	 <soapenv:Body>' +
        '	    <sch:GetLinkTokenRequest>' +
        '	       <sch:PlateDetails>' +
        '	          <sch:PlateCountryCode>' + profileObject.plateDetails.plateCountryCode + '</sch:PlateCountryCode>' +
        '	          <sch:PlateSourceId>' + profileObject.plateDetails.plateSourceId + '</sch:PlateSourceId>' +
        '	          <sch:PlateCategoryId>' + profileObject.plateDetails.plateCategoryId + '</sch:PlateCategoryId>' +
        '	          <sch:PlateNumber>' + profileObject.plateDetails.plateNumber + '</sch:PlateNumber>' +
        '	          <sch:PlateColorId>' + profileObject.plateDetails.plateCode + '</sch:PlateColorId>' +
        '	       </sch:PlateDetails>' +
        '	       <sch:CountryCode>' + profileObject.plateDetails.mobileCountryCode + '</sch:CountryCode>' +
        '	       <sch:ContactNumber>' + profileObject.plateDetails.mobileOperationCode + profileObject.plateDetails.mobileNumber + '</sch:ContactNumber>' +
        '	       <sch:AppId>SALIK</sch:AppId>' +
        '	    </sch:GetLinkTokenRequest>' +
        '	 </soapenv:Body>' +
        '	</soapenv:Envelope>';


    var SOAPAction = "GetLinkTokenRequest";
    var servicePath = '/salikRechargeService';
    var requestObj = buildBody([request], true);

    //	return{
    //		message:request
    //	}


    return invokeWebServiceString(requestObj, servicePath, SOAPAction, isEncryptResponse, encryptionPassword);


    //	return{
    //		Envelope:{
    //						
    //			"Body":{"GetLinkTokenResponse":{
    //					"Result": {
    //						"LinkToken":"EUh0Gp0wFDTmMfpFJpuhfpjrgm+SYbZqfYzri1hyeR6aWikQByEwLCmI7RohuC4fqaIVA5yly8q8ApLv4I4Xlgr5InG36Lvf5T8i1mOPAY378LNXJhyIld2g8/7R/pOZPD6bFsoG8NSQCzRFf5/lFb0h2JthiUeWZsY+/K1jqvzr0TdqZRnkkedSi7pET2xAs4QUD8xdaMNL/V9tdbBjUfT6UL7wURQP8f9nWwPmc0yGV/0mH8JDvYAbHQPn+H2vi9eJLRT10e5DV2VIB8uRw/cJWsyX+LhciskwEI4WykgDPe/nTs5ycdaRYSPWqZ5kz5QqOX+kdEj4FdBTPw+3JNI84a2tftc/W7VT6Ft6+3n5t0ysd0k7J9NOulF2zDVf"
    //						},
    //						"ResponseCode": "20_70",
    //						"ResponseDescription": "Success"
    //						}
    //			},
    //			"Header":"",
    //			"totalTime":972,
    //			"isSuccessful":true,
    //			"responseHeaders":{"Date":"Mon, 03 Jul 2017 08:08:02 GMT","Content-Type":"text\/xml; charset=utf-8"},
    //			"statusReason":"OK",
    //			"warnings":[],
    //			"errors":[],
    //			"info":[],
    //			"responseTime":971,
    //			"statusCode":200
    //		}
    //	}


}

function epayTopUpForAnonymous(linkToken, amount, isEncryptResponse, encryptionPassword) {


    var userName = MFP.Server.getPropertyValue("wsse.tibco.username");
    var password = MFP.Server.getPropertyValue("wsse.tibco.password");

    var requestDate = new Date(Date.now());
    var requestDateFormated = requestDate.toISOString(); // Returns 2011-10-05T14:48:00.000Z


    var request = '<soapenv:Envelope xmlns:sch="http://www.rta.ae/schemas/SalikRechargeService/Schema.xsd" xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/">' +
        ' <soapenv:Header>' +
        '<wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">' +
        '<wsse:UsernameToken wsu:Id="UsernameToken-2">' +
        '<wsse:Username>' + userName + '</wsse:Username>' +
        '<wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">' + password + '</wsse:Password>' +
        '<wsse:Nonce EncodingType="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-soap-message-security-1.0#Base64Binary">VsSlRbbmLYf7+wfjTvz+IQ==</wsse:Nonce>' +
        '<wsu:Created>' + requestDateFormated + '</wsu:Created>' +
        '</wsse:UsernameToken>' +
        '</wsse:Security>' +
        '</soapenv:Header>' +
        '<soapenv:Body>' +
        '<sch:EpayTopUpForAnonymousRequest>' +
        '<sch:LinkToken>' + linkToken + '</sch:LinkToken>' +
        '<sch:Amount>' + amount + '</sch:Amount>' +
        '<sch:AppId>SALIK</sch:AppId>' +
        '</sch:EpayTopUpForAnonymousRequest>' +
        '</soapenv:Body>' +
        '</soapenv:Envelope>';

    //	return{
    //		message:request
    //	}

    var SOAPAction = "EpayTopUpForAnonymousRequest";
    var servicePath = '/salikRechargeService';
    var requestObj = buildBody([request], true);



    return invokeWebServiceString(requestObj, servicePath, SOAPAction, isEncryptResponse, encryptionPassword);



    //	return{
    //		Envelope:{
    //					"Body":{"EpayTopUpForAnonymousResponse":{
    //							"Result": {
    //									"Uri":"https://epayment.qa.dubai.ae/ePayHub/Authentication/SPServlet?token=803CD18333E3C224A866DF501C0782371FBC5D05906240C11E315CE72CEAE1EBF810E503C68F58EACF702859099977C0D5541B311A76C0E301407816490C881FE75193AE15FE33EE2ACACAACA650590526FAA5E6F9E37F61761CA4905FE4774E",
    //									"EPayTrxnID": "950000021"
    //								},
    //								"ResponseCode": "20_0",
    //								"ResponseDescription": "Success"
    //							}
    //					},
    //					"Header":"",
    //					"totalTime":185,
    //					"isSuccessful":true,
    //					"responseHeaders":{"Date":"Mon, 03 Jul 2017 08:09:38 GMT","Content-Type":"text\/xml; charset=utf-8"},
    //					"statusReason":"OK",
    //					"warnings":[],
    //					"errors":[],
    //					"info":[],
    //					"responseTime":185,
    //					"statusCode":200
    //			}
    //		}


}

function getLinkTokenGuest_epayTopUpForAnonymousGuest(profileObject, amount, isEncryptResponse, encryptionPassword) {

    if (profileObject.plateDetails.plateCountryCode != 'AE') {
        profileObject.plateDetails.plateSourceId = '0';
        profileObject.plateDetails.plateCategoryId = '0';
        profileObject.plateDetails.plateCode = '0';
    }

    // Call getLinkToken Prodecure 
    var GetLinkTokenResponse = getLinkToken(profileObject, isEncryptResponse, encryptionPassword);

    try {
        Log("|drivers_and_vehicles_SalikRechargeAdapter-getLinkTokenGuest_epayTopUpForAnonymousGuest- GetLinkTokenResponse.Envelope.Body.GetLinkTokenResponse.ResponseCode  -----*****--->>> " + GetLinkTokenResponse.Envelope.Body.GetLinkTokenResponse.ResponseCode);

        if (GetLinkTokenResponse.Envelope.Body.GetLinkTokenResponse.ResponseCode == "20_70") {
            // Call epayTopUpForAnonymous procedure 
            Log("|drivers_and_vehicles_SalikRechargeAdapter-getLinkTokenGuest_epayTopUpForAnonymousGuest- linkToken  -----*****--->>> " + GetLinkTokenResponse.Envelope.Body.GetLinkTokenResponse.Result.LinkToken);
            Log("|drivers_and_vehicles_SalikRechargeAdapter-getLinkTokenGuest_epayTopUpForAnonymousGuest- amount  -----*****--->>> " + amount);


            return epayTopUpForAnonymous(GetLinkTokenResponse.Envelope.Body.GetLinkTokenResponse.Result.LinkToken, amount, isEncryptResponse, encryptionPassword);

        } else {
            return GetLinkTokenResponse;
        }
    } catch (e) {
        return GetLinkTokenResponse;
    }

}

function epayResponseGuest(EpayTrxnID, isEncryptResponse, encryptionPassword) {

    var userName = MFP.Server.getPropertyValue("wsse.tibco.username");
    var password = MFP.Server.getPropertyValue("wsse.tibco.password");

    var requestDate = new Date(Date.now());
    var requestDateFormated = requestDate.toISOString(); // Returns 2011-10-05T14:48:00.000Z


    var request = '<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="http://www.rta.ae/schemas/SalikRechargeService/Schema.xsd">' +
        '<soapenv:Header>' +
        ' <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">' +
        ' <wsse:UsernameToken wsu:Id="UsernameToken-2">' +
        ' <wsse:Username>' + userName + '</wsse:Username>' +
        ' <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">' + password + '</wsse:Password>' +
        ' <wsse:Nonce EncodingType="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-soap-message-security-1.0#Base64Binary">VsSlRbbmLYf7+wfjTvz+IQ==</wsse:Nonce>' +
        ' <wsu:Created>' + requestDateFormated + '</wsu:Created>' +
        ' </wsse:UsernameToken>' +
        ' </wsse:Security></soapenv:Header>' +
        '<soapenv:Body>' +
        '  <sch:EpayResponseRequest>' +
        '    <sch:EPayTrxnID>' + EpayTrxnID + '</sch:EPayTrxnID>' +
        '    <sch:AppId>SALIK</sch:AppId>' +
        ' </sch:EpayResponseRequest>' +
        '</soapenv:Body>' +
        '</soapenv:Envelope>';

    //	return{
    //		message:request
    //	}

    var SOAPAction = "EpayResponseRequest";
    var servicePath = '/salikRechargeService';
    var requestObj = buildBody([request], true);

    return invokeWebServiceString(requestObj, servicePath, SOAPAction, isEncryptResponse, encryptionPassword);

}

function topUpAccountTest(isEncryptResponse, encryptionPassword) {

    var userName = MFP.Server.getPropertyValue("wsse.tibco.username");
    var password = MFP.Server.getPropertyValue("wsse.tibco.password");

    var requestDate = new Date(Date.now());
    var requestDateFormated = requestDate.toISOString(); // Returns 2011-10-05T14:48:00.000Z


    var request = '<soapenv:Envelope xmlns:sch="http://www.rta.ae/schemas/SalikRechargeService/Schema.xsd" xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/"> ' +
        ' <soapenv:Header>' +
        '	    <wsse:Security soapenv:mustUnderstand="0" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">' +
        '	       <wsse:UsernameToken wsu:Id="UsernameToken-6">' +
        '	          <wsse:Username>' + userName + '</wsse:Username>' +
        '	          <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">' + password + '</wsse:Password>' +
        '	          <wsse:Nonce EncodingType="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-soap-message-security-1.0#Base64Binary">1FVzwxCsg9Ad6bIUvIlIOw==</wsse:Nonce>' +
        '	          <wsu:Created>' + requestDateFormated + '</wsu:Created>' +
        '	       </wsse:UsernameToken>' +
        '	    </wsse:Security>' +
        '	 </soapenv:Header>' +
        ' 	 <soapenv:Body>' +
        '	    <sch:TopUpAccountRequest>' +
        '	       <sch:PlateDetails>' +
        '	          <sch:PlateCountryCode>AE</sch:PlateCountryCode>' +
        ' 	          <sch:PlateSourceId>1</sch:PlateSourceId>' +
        '	          <sch:PlateCategoryId>1</sch:PlateCategoryId>' +
        '	          <sch:PlateNumber>11617</sch:PlateNumber>' +
        '	          <sch:PlateColorId>11</sch:PlateColorId>' +
        '	       </sch:PlateDetails>' +
        '	       <sch:MobileCountryCode>00971</sch:MobileCountryCode>' +
        '	       <sch:MobileNumber>0501346676</sch:MobileNumber>' +
        '	       <sch:RechargeCardNumber>397739580973</sch:RechargeCardNumber>' +
        '	    </sch:TopUpAccountRequest>' +
        '	 </soapenv:Body>' +
        '	</soapenv:Envelope>';


    var SOAPAction = "TopUpAccountRequest";
    var servicePath = '/salikRechargeService';
    var requestObj = buildBody([request], true);

    //	return{
    //		message:request
    //	}


    return invokeWebServiceString(requestObj, servicePath, SOAPAction, isEncryptResponse, encryptionPassword);
}

function getLinkTokenTest(isEncryptResponse, encryptionPassword) {

    var userName = MFP.Server.getPropertyValue("wsse.tibco.username");
    var password = MFP.Server.getPropertyValue("wsse.tibco.password");

    var requestDate = new Date(Date.now());
    var requestDateFormated = requestDate.toISOString(); // Returns 2011-10-05T14:48:00.000Z


    var request = '<soapenv:Envelope xmlns:sch="http://www.rta.ae/schemas/SalikRechargeService/Schema.xsd" xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/">' +
        '   <soapenv:Header>' +
        '	    <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">' +
        '	       <wsse:UsernameToken wsu:Id="UsernameToken-4">' +
        '	          <wsse:Username>' + userName + '</wsse:Username>' +
        '	          <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">' + password + '</wsse:Password>' +
        '	          <wsse:Nonce EncodingType="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-soap-message-security-1.0#Base64Binary">mVMTpYGfjUKyczI8aqxbtg==</wsse:Nonce>' +
        '	          <wsu:Created>' + requestDateFormated + '</wsu:Created>' +
        '	       </wsse:UsernameToken>' +
        '	    </wsse:Security>' +
        '	 </soapenv:Header>' +
        '	 <soapenv:Body>' +
        '	    <sch:GetLinkTokenRequest>' +
        '	       <sch:PlateDetails>' +
        '	          <sch:PlateCountryCode>AE</sch:PlateCountryCode>' +
        '	          <sch:PlateSourceId>1</sch:PlateSourceId>' +
        '	          <sch:PlateCategoryId>1</sch:PlateCategoryId>' +
        '	          <sch:PlateNumber>11617</sch:PlateNumber>' +
        '	          <sch:PlateColorId>11</sch:PlateColorId>' +
        '	       </sch:PlateDetails>' +
        '	       <sch:CountryCode>00971</sch:CountryCode>' +
        '	       <sch:ContactNumber>0501346676</sch:ContactNumber>' +
        '	       <sch:AppId>SALIK</sch:AppId>' +
        '	    </sch:GetLinkTokenRequest>' +
        '	 </soapenv:Body>' +
        '	</soapenv:Envelope>';


    var SOAPAction = "GetLinkTokenRequest";
    var servicePath = '/salikRechargeService';
    var requestObj = buildBody([request], true);

    //	return{
    //		message:request
    //	}


    return invokeWebServiceString(requestObj, servicePath, SOAPAction, isEncryptResponse, encryptionPassword);
}

function epayTopUpForAnonymousTest(isEncryptResponse, encryptionPassword) {

    var userName = MFP.Server.getPropertyValue("wsse.tibco.username");
    var password = MFP.Server.getPropertyValue("wsse.tibco.password");

    var requestDate = new Date(Date.now());
    var requestDateFormated = requestDate.toISOString(); // Returns 2011-10-05T14:48:00.000Z


    var request = '<soapenv:Envelope xmlns:sch="http://www.rta.ae/schemas/SalikRechargeService/Schema.xsd" xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/">' +
        ' <soapenv:Header>' +
        '	    <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">' +
        '	       <wsse:UsernameToken wsu:Id="UsernameToken-2">' +
        '	          <wsse:Username>' + userName + '</wsse:Username>' +
        '	          <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">' + password + '</wsse:Password>' +
        '	          <wsse:Nonce EncodingType="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-soap-message-security-1.0#Base64Binary">VsSlRbbmLYf7+wfjTvz+IQ==</wsse:Nonce>' +
        '	          <wsu:Created>' + requestDateFormated + '</wsu:Created>' +
        '	       </wsse:UsernameToken>' +
        '	    </wsse:Security>' +
        '	 </soapenv:Header>' +
        '	 <soapenv:Body>' +
        '	    <sch:EpayTopUpForAnonymousRequest>' +
        '	       <sch:LinkToken>EUh0Gp0wFDTmMfpFJpuhfnWke2JrPEHSKbw8HmcdS70EgKfu4UFM5sbJUd1zNhldyUVr6FWb5FstwHfDKmz5nBfmdC18fttf8DgQc9iAzxpDnW/eWUCu/6PiSEdYQnp0labsMcmByxPvW2iqOJWO6ukrFp/QqWaRFtcoMlg9yzqi1ihfGRibyGD8gElHwR0occUGDiEGc8dWzNjoi4it2EbPMaYs7QkhPrgRx98MfyxWL5kSt+gt7KvCD+HsWApefFW5GiyPoLi9YdqMpvQnjHMahx5qvLsgeOShFktYRfofxY24MIcMD0tr3DdourOZESKkSppC8gMj7AgogV15REWSQTsSqFr83IlEKDWc4+hFHIP0vCcYL5SyEfzJDPC1</sch:LinkToken>' +
        '	       <sch:Amount>50</sch:Amount>' +
        '	       <sch:AppId>SALIK</sch:AppId>' +
        '	    </sch:EpayTopUpForAnonymousRequest>' +
        '	 </soapenv:Body>' +
        '	</soapenv:Envelope>';


    var SOAPAction = "EpayTopUpForAnonymousRequest";
    var servicePath = '/salikRechargeService';
    var requestObj = buildBody([request], true);

    //return{
    //	message:request
    //}


    return invokeWebServiceString(requestObj, servicePath, SOAPAction, isEncryptResponse, encryptionPassword);
}

function testgetLogsByDate() {

    var startDate = '1';
    var endDate = '';

    var invocationData = {
        adapter: 'SalikLogsAdapter',
        procedure: 'getLogsByDate',
        parameters: [startDate, endDate]
    };

    webServiceResult = MFP.Server.invokeProcedure(invocationData);

    return webServiceResult;
}

function getRechargeReceipts(requestParams, isEncryptResponse, encryptionPassword) {
    /* var requestParams = {
 	"RtaUserId":"",
 	"linking_attribute":"",
 	"PageId":"",
 	"PageSize":"",
 	"FromDate":"",
 	"ToDate":""
 }*/

    if (notValid(requestParams.RtaUserId) || notValid(requestParams.linking_attribute) || notValid(requestParams.PageId) || notValid(requestParams.PageSize) || notValid(requestParams.FromDate) || notValid(requestParams.ToDate)) {
        return validationError;
    } else {
        var request = soapEnvStart + soapHeaderStart + tibcoHeader + getGrantHeader(requestParams.RtaUserId, requestParams.linking_attribute) + soapHeaderEnd +
            '<soapenv:Body>' +
            '<sch:ViewRechargeReceiptsRequest>' +
            '<sch:PageId>' + requestParams.PageId + '</sch:PageId>' +
            '<sch:PageSize>' + requestParams.PageSize + '</sch:PageSize>' +
            '<sch:FromDate>' + requestParams.FromDate + '</sch:FromDate>' +
            '<sch:ToDate>' + requestParams.ToDate + '</sch:ToDate>' +
            '<sch:AppId>SALIK</sch:AppId>' +
            '</sch:ViewRechargeReceiptsRequest>' +
            '</soapenv:Body>' +

            soapEnvEnd;

        var servicePath = '/salikRechargeService';
        var SOAPAction = 'ViewRechargeReceiptsRequest';
        var requestObj = buildBody([request], true);

        return invokeWebServiceString(requestObj, servicePath, SOAPAction, isEncryptResponse, encryptionPassword);
    }
}

function exportRechargeReceipts(requestParams, isEncryptResponse, encryptionPassword) {
    /* var requestParams = {
 	"RtaUserId":"",
 	"linking_attribute":"",
 	"FromDate":"",
 	"ToDate":"",
 	"FileType":""
 }*/

    if (notValid(requestParams.RtaUserId) || notValid(requestParams.linking_attribute) || notValid(requestParams.FileType)) {
        return validationError;
    } else {
        var fromD = (notValid(requestParams.FromDate)) ? '' : '<sch:FromDate>' + requestParams.FromDate + '</sch:FromDate>';
        var toD = (notValid(requestParams.ToDate)) ? '' : '<sch:ToDate>' + requestParams.ToDate + '</sch:ToDate>';
        var request = soapEnvStart + soapHeaderStart + tibcoHeader + getGrantHeader(requestParams.RtaUserId, requestParams.linking_attribute) + soapHeaderEnd +
            '<soapenv:Body>' +
            '<sch:ExportRechargeReceiptRequest>' +
            '<!--Optional:-->' +
            fromD +
            '<!--Optional:-->' +
            toD +
            '<sch:FileType>' + requestParams.FileType + '</sch:FileType>' +
            '<sch:AppId>SALIK</sch:AppId>' +
            '</sch:ExportRechargeReceiptRequest>' +
            '</soapenv:Body>' +

            soapEnvEnd;

        var servicePath = '/salikRechargeService';
        var SOAPAction = 'ExportRechargeReceiptRequest';
        var requestObj = buildBody([request], true);

        return invokeWebServiceString(requestObj, servicePath, SOAPAction, isEncryptResponse, encryptionPassword);
    }
}

function postTopupAccountByRechargeCard(requestParams, isEncryptResponse, encryptionPassword) {
    /* var requestParams = {
 	"RtaUserId":"",
 	"linking_attribute":"",
 	"RechargeCardNumber":""
 }*/

    if (notValid(requestParams.RtaUserId) || notValid(requestParams.linking_attribute) || notValid(requestParams.RechargeCardNumber)) {
        return validationError;
    } else {
        var request = soapEnvStart + soapHeaderStart + tibcoHeader + getGrantHeader(requestParams.RtaUserId, requestParams.linking_attribute) + soapHeaderEnd +
            '<soapenv:Body>' +
            '<sch:TopUpASalikAccountRequest>' +
            '<sch:RechargeCardNumber>' + requestParams.RechargeCardNumber + '</sch:RechargeCardNumber>' +
            '<sch:AppId>SALIK</sch:AppId>' +
            '</sch:TopUpASalikAccountRequest>' +
            '</soapenv:Body>' +

            soapEnvEnd;

        var servicePath = '/salikRechargeService';
        var SOAPAction = 'TopUpASalikAccountRequest';
        var requestObj = buildBody([request], true);

        return invokeWebServiceString(requestObj, servicePath, SOAPAction, isEncryptResponse, encryptionPassword);
    }
}

function postTopupPlateByRechargeCard(requestParams, isEncryptResponse, encryptionPassword) {
    /* var requestParams = {
 	"RtaUserId":"",
 	"linking_attribute":"",
 	"PlateCountryCode":"",
 	"PlateSourceId":"",
 	"PlateCategoryId":"",
 	"PlateNumber":"",
 	"PlateColorId":"",
 	"MobileCountryCode":"",
 	"MobileNumber":"",
 	"RechargeCardNumber":""
 }*/

    if (notValid(requestParams.RtaUserId) || notValid(requestParams.linking_attribute) || notValid(requestParams.PlateCountryCode) || notValid(requestParams.PlateSourceId) || notValid(requestParams.PlateCategoryId) || notValid(requestParams.PlateNumber) || notValid(requestParams.MobileCountryCode) || notValid(requestParams.MobileNumber) || notValid(requestParams.RechargeCardNumber)) {
        return validationError;
    } else {
        var request = soapEnvStart + soapHeaderStart + tibcoHeader + getGrantHeader(requestParams.RtaUserId, requestParams.linking_attribute) + soapHeaderEnd +

            '<soapenv:Body>' +
            '<sch:TopUpUsingPlateNumberAndMobileNumberRequest>' +
            '<sch:PlateDetails>' +
            '<sch:PlateCountryCode>' + requestParams.PlateCountryCode + '</sch:PlateCountryCode>' +
            '<sch:PlateSourceId>' + requestParams.PlateSourceId + '</sch:PlateSourceId>' +
            '<sch:PlateCategoryId>' + requestParams.PlateCategoryId + '</sch:PlateCategoryId>' +
            '<sch:PlateNumber>' + requestParams.PlateNumber + '</sch:PlateNumber>' +
            '<!--Optional:-->' +
            '<sch:PlateColorId>' + requestParams.PlateColorId + '</sch:PlateColorId>' +
            '</sch:PlateDetails>' +
            '<sch:MobileCountryCode>' + requestParams.MobileCountryCode + '</sch:MobileCountryCode>' +
            '<sch:MobileNumber>' + requestParams.MobileNumber + '</sch:MobileNumber>' +
            '<sch:RechargeCardNumber>' + requestParams.RechargeCardNumber + '</sch:RechargeCardNumber>' +
            '<sch:AppId>SALIK</sch:AppId>' +
            '</sch:TopUpUsingPlateNumberAndMobileNumberRequest>' +
            '</soapenv:Body>' +

            soapEnvEnd;

        var servicePath = '/salikRechargeService';
        var SOAPAction = 'TopUpUsingPlateNumberAndMobileNumberRequest';
        var requestObj = buildBody([request], true);

        return invokeWebServiceString(requestObj, servicePath, SOAPAction, isEncryptResponse, encryptionPassword);
    }
}

function postTopupAccountByEpay(requestParams, isEncryptResponse, encryptionPassword) {
    /* var requestParams = {
 	"RtaUserId":"",
 	"linking_attribute":"",
 	"Amount":""
 }*/

    if (notValid(requestParams.RtaUserId) || notValid(requestParams.linking_attribute) || notValid(requestParams.Amount)) {
        return validationError;
    } else {
        var request = soapEnvStart + soapHeaderStart + tibcoHeader + getGrantHeader(requestParams.RtaUserId, requestParams.linking_attribute) + soapHeaderEnd +
            '<soapenv:Body>' +
            '<sch:TopUpUsingePayRequest>' +
            '<sch:Amount>' + requestParams.Amount + '</sch:Amount>' +
            '<sch:AppId>SALIK</sch:AppId>' +
            '</sch:TopUpUsingePayRequest>' +
            '</soapenv:Body>' +

            soapEnvEnd;

        var servicePath = '/salikRechargeService';
        var SOAPAction = 'TopUpUsingePayRequest';
        var requestObj = buildBody([request], true);

        return invokeWebServiceString(requestObj, servicePath, SOAPAction, isEncryptResponse, encryptionPassword);
    }
}


function postTopupFriendAccountByRechargeCard(requestParams, isEncryptResponse, encryptionPassword) {
    /* var requestParams = {
 	"RtaUserId":"",
 	"linking_attribute":"",
 	"FriendAccountId":"",
 	"FriendAccountPin":"",
 	"RechargeCardNumber":""
 }*/

    if (notValid(requestParams.RtaUserId) || notValid(requestParams.linking_attribute) || notValid(requestParams.FriendAccountId) || notValid(requestParams.FriendAccountPin) || notValid(requestParams.RechargeCardNumber)) {
        return validationError;
    } else {
        var request = soapEnvStart + soapHeaderStart + tibcoHeader + getGrantHeader(requestParams.RtaUserId, requestParams.linking_attribute) + soapHeaderEnd +
            '<soapenv:Body>' +
            '<sch:RechargeAnotherAccountUsingAccountAndPinRequest>' +
            '<sch:FriendAccountId>' + requestParams.FriendAccountId + '</sch:FriendAccountId>' +
            '<sch:FriendAccountPin>' + requestParams.FriendAccountPin + '</sch:FriendAccountPin>' +
            '<sch:RechargeCardNumber>' + requestParams.RechargeCardNumber + '</sch:RechargeCardNumber>' +
            '<sch:AppId>SALIK</sch:AppId>' +
            '</sch:RechargeAnotherAccountUsingAccountAndPinRequest>' +
            '</soapenv:Body>' +

            soapEnvEnd;

        var servicePath = '/salikRechargeService';
        var SOAPAction = 'RechargeAnotherAccountUsingAccountAndPinRequest';
        var requestObj = buildBody([request], true);

        return invokeWebServiceString(requestObj, servicePath, SOAPAction, isEncryptResponse, encryptionPassword);
    }
}

function getEpayLinkTokenForFriend(requestParams, isEncryptResponse, encryptionPassword) {
    /* var requestParams = {
 	"RtaUserId":"",
 	"linking_attribute":"",
 	"PlateCountryCode":"",
 	"PlateSourceId":"",
 	"PlateCategoryId":"",
 	"PlateNumber":"",
 	"PlateColorId":"",
 	"MobileCountryCode":"",
 	"MobileNumber":""
 }*/

    if (notValid(requestParams.RtaUserId) || notValid(requestParams.linking_attribute) || notValid(requestParams.PlateCountryCode) || notValid(requestParams.PlateSourceId) || notValid(requestParams.PlateCategoryId) || notValid(requestParams.PlateNumber) || notValid(requestParams.MobileCountryCode) || notValid(requestParams.MobileNumber)) {
        return validationError;
    } else {
        var request = soapEnvStart + soapHeaderStart + tibcoHeader + getGrantHeader(requestParams.RtaUserId, requestParams.linking_attribute) + soapHeaderEnd +

            '<soapenv:Body>' +
            '<sch:GetLinkTokenRequest>' +
            '<sch:PlateDetails>' +
            '<sch:PlateCountryCode>' + requestParams.PlateCountryCode + '</sch:PlateCountryCode>' +
            '<sch:PlateSourceId>' + requestParams.PlateSourceId + '</sch:PlateSourceId>' +
            '<sch:PlateCategoryId>' + requestParams.PlateCategoryId + '</sch:PlateCategoryId>' +
            '<sch:PlateNumber>' + requestParams.PlateNumber + '</sch:PlateNumber>' +
            '<!--Optional:-->' +
            '<sch:PlateColorId>' + requestParams.PlateColorId + '</sch:PlateColorId>' +
            '</sch:PlateDetails>' +
            '<sch:CountryCode>' + requestParams.MobileCountryCode + '</sch:CountryCode>' +
            '<sch:ContactNumber>' + requestParams.MobileNumber + '</sch:ContactNumber>' +
            '<sch:AppId>SALIK</sch:AppId>' +
            '</sch:GetLinkTokenRequest>' +
            '</soapenv:Body>' +

            soapEnvEnd;

        var servicePath = '/salikRechargeService';
        var SOAPAction = 'GetLinkTokenRequest';
        var requestObj = buildBody([request], true);

        return invokeWebServiceString(requestObj, servicePath, SOAPAction, isEncryptResponse, encryptionPassword);
    }
}

function postTopupFriendAccountByEpay(requestParams, isEncryptResponse, encryptionPassword) {
    /* var requestParams = {
 	"RtaUserId":"",
 	"linking_attribute":"",
 	"LinkToken":"",
 	"Amount":""
 }*/

    if (notValid(requestParams.RtaUserId) || notValid(requestParams.linking_attribute) || notValid(requestParams.LinkToken) || notValid(requestParams.Amount)) {
        return validationError;
    } else {
        var request = soapEnvStart + soapHeaderStart + tibcoHeader + getGrantHeader(requestParams.RtaUserId, requestParams.linking_attribute) + soapHeaderEnd +

            '<soapenv:Body>' +
            '<sch:EpayTopUpForAnonymousRequest>' +
            '<sch:LinkToken>' + requestParams.LinkToken + '</sch:LinkToken>' +
            '<sch:Amount>' + requestParams.Amount + '</sch:Amount>' +
            '<sch:AppId>SALIK</sch:AppId>' +
            '</sch:EpayTopUpForAnonymousRequest>' +
            '</soapenv:Body>' +

            soapEnvEnd;

        var servicePath = '/salikRechargeService';
        var SOAPAction = 'EpayTopUpForAnonymousRequest';
        var requestObj = buildBody([request], true);

        return invokeWebServiceString(requestObj, servicePath, SOAPAction, isEncryptResponse, encryptionPassword);
    }
}

function _logRequestResponse(refNum, adapter, SOAPAction, request, response, isDBLog) {

    var invocationLog = {};

    if (request != null && response == null) {
        MFP.Logger.warn('\r\n\r\n' +
            '|--------START----------------|\r\n' +
            '|--------REQUEST--------------|\r\n' +
            '|--------START----------------|\r\n' +
            '|--------REF: ' + refNum + '--------|\r\n' +
            '|--------TIME: ' + formateDate(refNum) + '-------|\r\n' +
            '|--------Adapter: ' + adapter + '|\r\n' +
            '|--------Action: ' + SOAPAction + '---|\r\n' +
            '|--------Request: ' + JSON.stringify(request) + '---|\r\n' +
            '|--------END------------------|\r\n' +
            '|--------REQUEST--------------|\r\n' +
            '|--------END------------------|\r\n');
        invocationLog = {
            adapter: 'drivers_and_vehciles_CustomDB',
            procedure: 'dbLogReq',
            parameters: [refNum.toString(), adapter, SOAPAction, request]
        };
    } else if (request == null && response != null) {

        MFP.Logger.warn('\r\n\r\n' +
            '|--------START----------------|\r\n' +
            '|--------RESPONSE-------------|\r\n' +
            '|--------START----------------|\r\n' +
            '|--------REF: ' + refNum + '--------|\r\n' +
            '|--------TIME: ' + formateDate(refNum) + '-------|\r\n' +
            '|--------Adapter: ' + adapter + '-----------|\r\n' +
            '|--------Action: ' + SOAPAction + '---|\r\n' +
            '|--------Response: ' + JSON.stringify(response) + '---|\r\n' +
            '|--------END------------------|\r\n' +
            '|--------RESPONSE-------------|\r\n' +
            '|--------END------------------|\r\n');
        invocationLog = {
            adapter: 'drivers_and_vehciles_CustomDB',
            procedure: 'dbLogRes',
            parameters: [refNum.toString(), response]
        };
    }

    if (isDBLog)
        MFP.Server.invokeProcedure(invocationLog);

}