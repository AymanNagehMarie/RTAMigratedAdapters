///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Generated code  																			 //
////
//This is a SOAP adapter that was auto-generated by Worklight for invocation of specific SOAP-based services.   //
//The adapter may invoke more than one service as long as they are all from the same enpdpoint (server host).   //
//Each adapter procedure matches a single operation for the same endpoint server and accepts:                   //
//params  - Serialized JSON representation of the XML-based SOAP body to be sent to the service               //
//headers - Custom HTTP headers to be specified when invoking the remote service. It is a JSON object with    //
//the headers names and values. E.g. { 'name1' : 'value1', 'name2' : 'value2' }                     //
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
var IsDebugging;

function Log(text){
	try {
		IsDebugging=MFP.Server.getPropertyValue("drivers_and_vehicles_is_debugging");
	}catch(e){
		IsDebugging="false";
	}
	if(IsDebugging=="true")
		MFP.Logger.warn(text);
	else 
		MFP.Logger.debug(text);
}

function getUMServiceCredentials() {
	return {
		username_tibco_ldap : MFP.Server.getPropertyValue("wsse.tibco.username"),
		password_tibco_ldap : MFP.Server.getPropertyValue("wsse.tibco.password")
	};
}

function UserProfileAdapter_getUserProfile(requestString, isEncryptResponse, encryptionPassword) {
	var request = requestString.replace(/%#credentials!#!username_tibco_ldap#%/g,getUMServiceCredentials().username_tibco_ldap).replace(/%#credentials!#!password_tibco_ldap#%/g,getUMServiceCredentials().password_tibco_ldap);
	//MFP.Logger.warn("request to be sent:\n"+request);
	return invokeWebServiceString(request, null, isEncryptResponse, encryptionPassword);
}

function UserProfileAdapter_linkTrafficFileNo(requestString, isEncryptResponse, encryptionPassword) {
	var request = requestString.replace("%#credentials!#!username_tibco_ldap#%",getUMServiceCredentials().username_tibco_ldap).replace("%#credentials!#!password_tibco_ldap#%",getUMServiceCredentials().password_tibco_ldap);
	//MFP.Logger.warn("request to be sent:\n"+request);
	return invokeWebServiceString(request, null, isEncryptResponse, encryptionPassword);
}

function invokeWebServiceString(request, headers, isEncryptResponse, encryptionPassword) {
//	if (!headers)
//	headers = {
//	"SOAPAction" : ""
//	};
//	else
//	headers["SOAPAction"] = "";
	var startTime = new Date().getTime();
	var input = {
			method : 'post',
			headers :{
				"SOAPAction" : ""
			},
			returnedContentType : 'xml',
			path : '/portalprofileservice_v2',
			body : {
				content : request.toString(),
				contentType : 'text/xml; charset=utf-8'
			}
	};

	// Adding custom HTTP headers if they were provided as parameter to the
	// procedure call
	//headers && (input['headers'] = headers);

	var webServiceResult = MFP.Server.invokeHttp(input);
	if(isEncryptResponse != undefined && isEncryptResponse == true)
	{
		var responseString = JSON.stringify(webServiceResult);
		var invocationData = {
				adapter : 'drivers_and_vehciles_utilitiesAdapter',
				procedure : 'encryptData',
				parameters : [responseString,encryptionPassword]
		};
		webServiceResult = MFP.Server.invokeProcedure(invocationData);
	}	
	var endTime = new Date().getTime();
	//Log("time for user profile service is " + (endTime - startTime) + " ms");
	var invocationData = {
			adapter : 'drivers_and_vehciles_utilitiesAdapter',
			procedure : 'deleteCredientails',
			parameters : [webServiceResult]
	};
	return MFP.Server.invokeProcedure(invocationData); 
}
